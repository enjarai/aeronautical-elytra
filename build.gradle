plugins {
    id 'dev.architectury.loom' version '1.6-SNAPSHOT' apply(false)
    id 'me.fallenbreath.yamlang' version '1.3.1' apply(false)
    id "me.modmuss50.mod-publish-plugin" version "0.4.4" apply(false)
    id 'maven-publish'
}

version = "${mod_version}+${minecraft_version}"

subprojects {
    apply plugin: 'java'
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'me.fallenbreath.yamlang'
    apply plugin: "me.modmuss50.mod-publish-plugin"
    apply plugin: 'maven-publish'

    version = "${mod_version}+${minecraft_version}"

    repositories {
        // Personal maven for cicada and backup mirrors of some dependencies.
        maven { url "https://maven.enjarai.dev/mirrors" }
        maven { url "https://maven.enjarai.dev/releases" }

        // NeoForge
        maven { url 'https://maven.neoforged.net/releases/' }

        // Mod Menu.
        maven { url 'https://maven.terraformersmc.com' }

        // Cloth Config.
        maven { url "https://maven.shedaniel.me/" }
        maven { url "https://maven.terraformersmc.com/releases/" }

        // Jitpack for Mixin Extras.
        maven {
            url 'https://jitpack.io'
            content {
                includeGroup 'com.github.llamalad7'
            }
        }

        // YACL/Controlify
        maven { url "https://maven.isxander.dev/releases" }
        maven { url "https://maven.quiltmc.org/repository/release/" }

        // Mod Menu
        maven { url "https://maven.terraformersmc.com/releases" }

        // Permissions API
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    }

    java {
        toolchain.languageVersion = JavaLanguageVersion.of(17)
        withSourcesJar()
        withJavadocJar()
    }

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'      : minecraft_version
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(17)
    }

    plugins.withId('dev.architectury.loom') {
        loom {
            accessWidenerPath = project(":common").file("src/main/resources/${mod_id}.accesswidener")
        }   
    }

    processResources {
        var replaceProperties = [
                minecraft_version             : minecraft_version,

                forge_minecraft_version_range : forge_minecraft_version_range,
                forge_version                 : forge_version,
                forge_version_range           : forge_version_range,
                loader_version_range          : loader_version_range,

                fabric_minecraft_version_range: fabric_minecraft_version_range,

                fabric_version                : fabric_version,
                fabric_loader_version         : fabric_loader_version,

                mod_id                        : mod_id,
                mod_name                      : mod_name,
                mod_version                   : version, // findProperty('mod_version') ?: project.jar.archiveVersion,
                mod_license                   : mod_license,
                mod_author                    : mod_author,
                mod_credits                   : mod_credits,
                mod_description               : mod_description,
                mod_url                       : mod_url,
                mod_github                    : mod_github,
                mod_issue_tracker_url         : mod_issue_tracker_url,
        ]
        inputs.properties replaceProperties
        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', '*.mixins.json']) {
            expand replaceProperties
        }
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }

    yamlang {
        targetSourceSets = [sourceSets.main]
        inputDir = "assets/${mod_id}/lang"
    }
}

tasks.register('publishAll') {
    group 'publishing'
    dependsOn 'publish'
    dependsOn 'publishMods'
}
